(class (attrs public synchronized ) java/util/concurrent/atomic/AtomicInteger
 (super java/lang/Number)
 (source "AtomicInteger.java")
 (implements java/io/Serializable)

 (field (attrs private static final ) serialVersionUID long -562078002); 0xde7f5ece )
 (field (attrs private static final ) unsafe [object sun/misc/Unsafe] )
 (field (attrs private static final ) valueOffset long )
 (field (attrs private volatile ) value int )

(method (attrs static ) <clinit>()void
  (limit registers 4)
  (catch java/lang/Exception from lf188c to lf18ac using lf18ae)
  (line 28)
  (sget-object v1 java/util/concurrent/atomic/UnsafeAccess.THE_ONE [object sun/misc/Unsafe])
  (sput-object v1 java/util/concurrent/atomic/AtomicInteger.unsafe [object sun/misc/Unsafe])
  (label lf188c)
  (line 34)
  (sget-object v1 java/util/concurrent/atomic/AtomicInteger.unsafe [object sun/misc/Unsafe])
  (const-class v2 java/util/concurrent/atomic/AtomicInteger)
  (const-string v3 "value")
  (invoke-virtual-quick {v2 v3} vtable #0x1d)
  (move-result-object v2)
  (invoke-virtual-quick {v1 v2} vtable #0x16)
  (move-result-wide v1)
  (sput-wide v1 java/util/concurrent/atomic/AtomicInteger.valueOffset long)
  (label lf18ac)
  (line 37)
  (return-void )
  (label lf18ae)
  (line 36)
  (move-exception v1)
  (move-object v0 v1)
  (new-instance v1 java/lang/Error)
  (invoke-direct {v1 v0} java/lang/Error/<init> [object java/lang/Throwable] )
  (throw v1)
 )

(method (attrs public ) <init>()void
  (limit registers 1)
  ; this: v0 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 53)
  (invoke-direct {v0} java/lang/Number/<init> )
  (line 54)
  (return-void )
 )

(method (attrs public ) <init>(int )void
  (limit registers 2)
  ; this: v0 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v1 (int)
  (line 46)
  (invoke-direct {v0} java/lang/Number/<init> )
  (line 47)
  (iput-quick v1 v0 )
  (line 48)
  (return-void )
 )

(method (attrs public final ) addAndGet(int )int
  (limit registers 5)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v4 (int)
  (label lf1914)
  (line 196)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 197)
  (add-int v1 v0 v4)
  (line 198)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf1914)
  (line 199)
  (return v1)
)

(method (attrs public final ) compareAndSet(int int )boolean
  (limit registers 9)
  ; this: v6 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v7 (int)
  ; parameter[1] : v8 (int)
  (line 98)
  (sget-object v0 java/util/concurrent/atomic/AtomicInteger.unsafe [object sun/misc/Unsafe])
  (sget-wide v2 java/util/concurrent/atomic/AtomicInteger.valueOffset long)
  (move-object v1 v6)
  (move v4 v7)
  (move v5 v8)
  (invoke-virtual-quick/range {v0 .. v5},vtable #0xd)
  (move-result v0)
  (return v0)
)

(method (attrs public final ) decrementAndGet()int
  (limit registers 4)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  (label lf1968)
  (line 181)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 182)
  (const/4 v2 1)
  (sub-int v1 v0 v2)
  (line 183)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf1968)
  (line 184)
  (return v1)
)

(method (attrs public ) doubleValue()double
  (limit registers 3)
  ; this: v2 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 225)
  (invoke-virtual-quick {v2} vtable #0x14)
  (move-result v0)
  (int-to-double v0 v0)
  (return-wide v0)
)

(method (attrs public ) floatValue()float
  (limit registers 2)
  ; this: v1 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 221)
  (invoke-virtual-quick {v1} vtable #0x14)
  (move-result v0)
  (int-to-float v0 v0)
  (return v0)
)

(method (attrs public final ) get()int
  (limit registers 2)
  ; this: v1 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 62)
  (iget-quick v0 v1 )
  (return v0)
)

(method (attrs public final ) getAndAdd(int )int
  (limit registers 5)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v4 (int)
  (label lf19e4)
  (line 153)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 154)
  (add-int v1 v0 v4)
  (line 155)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf19e4)
  (line 156)
  (return v0)
)

(method (attrs public final ) getAndDecrement()int
  (limit registers 4)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  (label lf1a10)
  (line 138)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 139)
  (const/4 v2 1)
  (sub-int v1 v0 v2)
  (line 140)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf1a10)
  (line 141)
  (return v0)
)

(method (attrs public final ) getAndIncrement()int
  (limit registers 4)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  (label lf1a3c)
  (line 124)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 125)
  (add-int/lit8 v1 v0 1)
  (line 126)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf1a3c)
  (line 127)
  (return v0)
)

(method (attrs public final ) getAndSet(int )int
  (limit registers 4)
  ; this: v2 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v3 (int)
  (label lf1a68)
  (line 82)
  (invoke-virtual-quick {v2} vtable #0x14)
  (move-result v0)
  (line 83)
  (invoke-virtual-quick {v2 v0 v3} vtable #0x12)
  (move-result v1)
  (if-eqz v1 lf1a68)
  (line 84)
  (return v0)
)

(method (attrs public final ) incrementAndGet()int
  (limit registers 4)
  ; this: v3 ([object java/util/concurrent/atomic/AtomicInteger])
  (label lf1a90)
  (line 167)
  (invoke-virtual-quick {v3} vtable #0x14)
  (move-result v0)
  (line 168)
  (add-int/lit8 v1 v0 1)
  (line 169)
  (invoke-virtual-quick {v3 v0 v1} vtable #0x12)
  (move-result v2)
  (if-eqz v2 lf1a90)
  (line 170)
  (return v1)
)

(method (attrs public ) intValue()int
  (limit registers 2)
  ; this: v1 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 213)
  (invoke-virtual-quick {v1} vtable #0x14)
  (move-result v0)
  (return v0)
)

(method (attrs public ) longValue()long
  (limit registers 3)
  ; this: v2 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 217)
  (invoke-virtual-quick {v2} vtable #0x14)
  (move-result v0)
  (int-to-long v0 v0)
  (return-wide v0)
)

(method (attrs public final ) set(int )void
  (limit registers 2)
  ; this: v0 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v1 (int)
  (line 71)
  (iput-quick v1 v0 )
  (line 72)
  (return-void )
)

(method (attrs public ) toString()[object java/lang/String]
  (limit registers 2)
  ; this: v1 ([object java/util/concurrent/atomic/AtomicInteger])
  (line 208)
  (invoke-virtual-quick {v1} vtable #0x14)
  (move-result v0)
  (invoke-static {v0} java/lang/Integer/toString int )
  (move-result-object v0)
  (return-object v0)
)

(method (attrs public final ) weakCompareAndSet(int int )boolean
  (limit registers 9)
  ; this: v6 ([object java/util/concurrent/atomic/AtomicInteger])
  ; parameter[0] : v7 (int)
  ; parameter[1] : v8 (int)
  (line 114)
  (sget-object v0 java/util/concurrent/atomic/AtomicInteger.unsafe [object sun/misc/Unsafe])
  (sget-wide v2 java/util/concurrent/atomic/AtomicInteger.valueOffset long)
  (move-object v1 v6)
  (move v4 v7)
  (move v5 v8)
  (invoke-virtual-quick/range {v0 .. v5},vtable #0xd)
  (move-result v0)
  (return v0)
)

)
